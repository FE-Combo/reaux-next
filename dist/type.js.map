{"version":3,"file":"type.js","sourceRoot":"","sources":["../framework/type.ts"],"names":[],"mappings":"AAyCA,MAAM,OAAgB,SAAS;IAM7B,KAAK,CAAC,OAAO,CAAC,OAAY;QACxB,yBAAyB;IAC3B,CAAC;IACD,KAAK,CAAC,MAAM;QACV,yBAAyB;IAC3B,CAAC;IACD,KAAK,CAAC,QAAQ;QACZ,yBAAyB;IAC3B,CAAC;IACD,KAAK,CAAC,MAAM;QACV,yBAAyB;IAC3B,CAAC;CACF;AAED,MAAM,OAAgB,SAAS;IAC7B,YAA6B,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;IAAG,CAAC;CACjD","sourcesContent":["import { Store, Action } from \"redux\";\n\nexport interface AppCache {\n  actionHandlers: {};\n  modules: {};\n  store: Store<StateView>;\n}\n\nexport interface StateView {\n  app: {};\n  helper: StateViewHelper;\n}\n\nexport interface StateViewHelper {\n  loading?: StateViewHelperLoadingState;\n  lang?: string;\n  exception?: Exception;\n}\n\nexport interface StateViewHelperLoadingState {\n  [loadingType: string]: number;\n}\n\nexport interface ActionType<P = any> extends Action {\n  name?: string;\n  payload: P;\n}\n\nexport interface ActionPayload {\n  module: string;\n  state: any;\n}\n\nexport type HelperActionPayload =\n  | {\n      identifier: string;\n      hasShow: boolean;\n    }\n  | string\n  | Exception;\n\nexport abstract class BaseModel<S = {}> {\n  abstract readonly moduleName: string;\n  abstract readonly initState: S;\n  abstract state: Readonly<S>;\n  abstract rootState: Readonly<StateView>;\n  abstract setState(newState: Partial<S>): void;\n  async onReady(context: any) {\n    // extends to be overrode\n  }\n  async onLoad() {\n    // extends to be overrode\n  }\n  async onUnload() {\n    // extends to be overrode\n  }\n  async onHide() {\n    // extends to be overrode\n  }\n}\n\nexport abstract class Exception {\n  protected constructor(public message: string) {}\n}\n"]}